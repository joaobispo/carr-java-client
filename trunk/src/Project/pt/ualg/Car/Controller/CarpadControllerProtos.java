// Generated by the protocol buffer compiler.  DO NOT EDIT!

package pt.ualg.Car.Controller;

public final class CarpadControllerProtos {
  private CarpadControllerProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class KeyboardMaps extends
      com.google.protobuf.GeneratedMessage {
    // Use KeyboardMaps.newBuilder() to construct.
    private KeyboardMaps() {}
    
    private static final KeyboardMaps defaultInstance = new KeyboardMaps();
    public static KeyboardMaps getDefaultInstance() {
      return defaultInstance;
    }
    
    public KeyboardMaps getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pt.ualg.Car.Controller.CarpadControllerProtos.internal_static_AldricCarJavaClient_KeyboardMaps_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pt.ualg.Car.Controller.CarpadControllerProtos.internal_static_AldricCarJavaClient_KeyboardMaps_fieldAccessorTable;
    }
    
    // optional int32 wheelUp = 1 [default = 76];
    public static final int WHEELUP_FIELD_NUMBER = 1;
    private boolean hasWheelUp;
    private int wheelUp_ = 76;
    public boolean hasWheelUp() { return hasWheelUp; }
    public int getWheelUp() { return wheelUp_; }
    
    // optional int32 wheelDown = 2 [default = 74];
    public static final int WHEELDOWN_FIELD_NUMBER = 2;
    private boolean hasWheelDown;
    private int wheelDown_ = 74;
    public boolean hasWheelDown() { return hasWheelDown; }
    public int getWheelDown() { return wheelDown_; }
    
    // optional int32 triggerUp = 3 [default = 65];
    public static final int TRIGGERUP_FIELD_NUMBER = 3;
    private boolean hasTriggerUp;
    private int triggerUp_ = 65;
    public boolean hasTriggerUp() { return hasTriggerUp; }
    public int getTriggerUp() { return triggerUp_; }
    
    // optional int32 triggerDown = 4 [default = 90];
    public static final int TRIGGERDOWN_FIELD_NUMBER = 4;
    private boolean hasTriggerDown;
    private int triggerDown_ = 90;
    public boolean hasTriggerDown() { return hasTriggerDown; }
    public int getTriggerDown() { return triggerDown_; }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasWheelUp()) {
        output.writeInt32(1, getWheelUp());
      }
      if (hasWheelDown()) {
        output.writeInt32(2, getWheelDown());
      }
      if (hasTriggerUp()) {
        output.writeInt32(3, getTriggerUp());
      }
      if (hasTriggerDown()) {
        output.writeInt32(4, getTriggerDown());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasWheelUp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getWheelUp());
      }
      if (hasWheelDown()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getWheelDown());
      }
      if (hasTriggerUp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getTriggerUp());
      }
      if (hasTriggerDown()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getTriggerDown());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps result;
      
      // Construct using pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps();
        return builder;
      }
      
      protected pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.getDescriptor();
      }
      
      public pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps getDefaultInstanceForType() {
        return pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps) {
          return mergeFrom((pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps other) {
        if (other == pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.getDefaultInstance()) return this;
        if (other.hasWheelUp()) {
          setWheelUp(other.getWheelUp());
        }
        if (other.hasWheelDown()) {
          setWheelDown(other.getWheelDown());
        }
        if (other.hasTriggerUp()) {
          setTriggerUp(other.getTriggerUp());
        }
        if (other.hasTriggerDown()) {
          setTriggerDown(other.getTriggerDown());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setWheelUp(input.readInt32());
              break;
            }
            case 16: {
              setWheelDown(input.readInt32());
              break;
            }
            case 24: {
              setTriggerUp(input.readInt32());
              break;
            }
            case 32: {
              setTriggerDown(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 wheelUp = 1 [default = 76];
      public boolean hasWheelUp() {
        return result.hasWheelUp();
      }
      public int getWheelUp() {
        return result.getWheelUp();
      }
      public Builder setWheelUp(int value) {
        result.hasWheelUp = true;
        result.wheelUp_ = value;
        return this;
      }
      public Builder clearWheelUp() {
        result.hasWheelUp = false;
        result.wheelUp_ = 76;
        return this;
      }
      
      // optional int32 wheelDown = 2 [default = 74];
      public boolean hasWheelDown() {
        return result.hasWheelDown();
      }
      public int getWheelDown() {
        return result.getWheelDown();
      }
      public Builder setWheelDown(int value) {
        result.hasWheelDown = true;
        result.wheelDown_ = value;
        return this;
      }
      public Builder clearWheelDown() {
        result.hasWheelDown = false;
        result.wheelDown_ = 74;
        return this;
      }
      
      // optional int32 triggerUp = 3 [default = 65];
      public boolean hasTriggerUp() {
        return result.hasTriggerUp();
      }
      public int getTriggerUp() {
        return result.getTriggerUp();
      }
      public Builder setTriggerUp(int value) {
        result.hasTriggerUp = true;
        result.triggerUp_ = value;
        return this;
      }
      public Builder clearTriggerUp() {
        result.hasTriggerUp = false;
        result.triggerUp_ = 65;
        return this;
      }
      
      // optional int32 triggerDown = 4 [default = 90];
      public boolean hasTriggerDown() {
        return result.hasTriggerDown();
      }
      public int getTriggerDown() {
        return result.getTriggerDown();
      }
      public Builder setTriggerDown(int value) {
        result.hasTriggerDown = true;
        result.triggerDown_ = value;
        return this;
      }
      public Builder clearTriggerDown() {
        result.hasTriggerDown = false;
        result.triggerDown_ = 90;
        return this;
      }
    }
    
    static {
      pt.ualg.Car.Controller.CarpadControllerProtos.getDescriptor();
    }
    
    static {
      pt.ualg.Car.Controller.CarpadControllerProtos.internalForceInit();
    }
  }
  
  public static final class Calibration extends
      com.google.protobuf.GeneratedMessage {
    // Use Calibration.newBuilder() to construct.
    private Calibration() {}
    
    private static final Calibration defaultInstance = new Calibration();
    public static Calibration getDefaultInstance() {
      return defaultInstance;
    }
    
    public Calibration getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pt.ualg.Car.Controller.CarpadControllerProtos.internal_static_AldricCarJavaClient_Calibration_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pt.ualg.Car.Controller.CarpadControllerProtos.internal_static_AldricCarJavaClient_Calibration_fieldAccessorTable;
    }
    
    // optional int32 wheelNeutralValue = 1 [default = 93];
    public static final int WHEELNEUTRALVALUE_FIELD_NUMBER = 1;
    private boolean hasWheelNeutralValue;
    private int wheelNeutralValue_ = 93;
    public boolean hasWheelNeutralValue() { return hasWheelNeutralValue; }
    public int getWheelNeutralValue() { return wheelNeutralValue_; }
    
    // optional int32 triggerNeutralValue = 2 [default = 86];
    public static final int TRIGGERNEUTRALVALUE_FIELD_NUMBER = 2;
    private boolean hasTriggerNeutralValue;
    private int triggerNeutralValue_ = 86;
    public boolean hasTriggerNeutralValue() { return hasTriggerNeutralValue; }
    public int getTriggerNeutralValue() { return triggerNeutralValue_; }
    
    // optional int32 wheelSensitivity = 3 [default = 3];
    public static final int WHEELSENSITIVITY_FIELD_NUMBER = 3;
    private boolean hasWheelSensitivity;
    private int wheelSensitivity_ = 3;
    public boolean hasWheelSensitivity() { return hasWheelSensitivity; }
    public int getWheelSensitivity() { return wheelSensitivity_; }
    
    // optional int32 triggerSensitivity = 4 [default = 4];
    public static final int TRIGGERSENSITIVITY_FIELD_NUMBER = 4;
    private boolean hasTriggerSensitivity;
    private int triggerSensitivity_ = 4;
    public boolean hasTriggerSensitivity() { return hasTriggerSensitivity; }
    public int getTriggerSensitivity() { return triggerSensitivity_; }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasWheelNeutralValue()) {
        output.writeInt32(1, getWheelNeutralValue());
      }
      if (hasTriggerNeutralValue()) {
        output.writeInt32(2, getTriggerNeutralValue());
      }
      if (hasWheelSensitivity()) {
        output.writeInt32(3, getWheelSensitivity());
      }
      if (hasTriggerSensitivity()) {
        output.writeInt32(4, getTriggerSensitivity());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasWheelNeutralValue()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getWheelNeutralValue());
      }
      if (hasTriggerNeutralValue()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getTriggerNeutralValue());
      }
      if (hasWheelSensitivity()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getWheelSensitivity());
      }
      if (hasTriggerSensitivity()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getTriggerSensitivity());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.Calibration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pt.ualg.Car.Controller.CarpadControllerProtos.Calibration prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private pt.ualg.Car.Controller.CarpadControllerProtos.Calibration result;
      
      // Construct using pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new pt.ualg.Car.Controller.CarpadControllerProtos.Calibration();
        return builder;
      }
      
      protected pt.ualg.Car.Controller.CarpadControllerProtos.Calibration internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new pt.ualg.Car.Controller.CarpadControllerProtos.Calibration();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.getDescriptor();
      }
      
      public pt.ualg.Car.Controller.CarpadControllerProtos.Calibration getDefaultInstanceForType() {
        return pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public pt.ualg.Car.Controller.CarpadControllerProtos.Calibration build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private pt.ualg.Car.Controller.CarpadControllerProtos.Calibration buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public pt.ualg.Car.Controller.CarpadControllerProtos.Calibration buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        pt.ualg.Car.Controller.CarpadControllerProtos.Calibration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pt.ualg.Car.Controller.CarpadControllerProtos.Calibration) {
          return mergeFrom((pt.ualg.Car.Controller.CarpadControllerProtos.Calibration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(pt.ualg.Car.Controller.CarpadControllerProtos.Calibration other) {
        if (other == pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.getDefaultInstance()) return this;
        if (other.hasWheelNeutralValue()) {
          setWheelNeutralValue(other.getWheelNeutralValue());
        }
        if (other.hasTriggerNeutralValue()) {
          setTriggerNeutralValue(other.getTriggerNeutralValue());
        }
        if (other.hasWheelSensitivity()) {
          setWheelSensitivity(other.getWheelSensitivity());
        }
        if (other.hasTriggerSensitivity()) {
          setTriggerSensitivity(other.getTriggerSensitivity());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setWheelNeutralValue(input.readInt32());
              break;
            }
            case 16: {
              setTriggerNeutralValue(input.readInt32());
              break;
            }
            case 24: {
              setWheelSensitivity(input.readInt32());
              break;
            }
            case 32: {
              setTriggerSensitivity(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 wheelNeutralValue = 1 [default = 93];
      public boolean hasWheelNeutralValue() {
        return result.hasWheelNeutralValue();
      }
      public int getWheelNeutralValue() {
        return result.getWheelNeutralValue();
      }
      public Builder setWheelNeutralValue(int value) {
        result.hasWheelNeutralValue = true;
        result.wheelNeutralValue_ = value;
        return this;
      }
      public Builder clearWheelNeutralValue() {
        result.hasWheelNeutralValue = false;
        result.wheelNeutralValue_ = 93;
        return this;
      }
      
      // optional int32 triggerNeutralValue = 2 [default = 86];
      public boolean hasTriggerNeutralValue() {
        return result.hasTriggerNeutralValue();
      }
      public int getTriggerNeutralValue() {
        return result.getTriggerNeutralValue();
      }
      public Builder setTriggerNeutralValue(int value) {
        result.hasTriggerNeutralValue = true;
        result.triggerNeutralValue_ = value;
        return this;
      }
      public Builder clearTriggerNeutralValue() {
        result.hasTriggerNeutralValue = false;
        result.triggerNeutralValue_ = 86;
        return this;
      }
      
      // optional int32 wheelSensitivity = 3 [default = 3];
      public boolean hasWheelSensitivity() {
        return result.hasWheelSensitivity();
      }
      public int getWheelSensitivity() {
        return result.getWheelSensitivity();
      }
      public Builder setWheelSensitivity(int value) {
        result.hasWheelSensitivity = true;
        result.wheelSensitivity_ = value;
        return this;
      }
      public Builder clearWheelSensitivity() {
        result.hasWheelSensitivity = false;
        result.wheelSensitivity_ = 3;
        return this;
      }
      
      // optional int32 triggerSensitivity = 4 [default = 4];
      public boolean hasTriggerSensitivity() {
        return result.hasTriggerSensitivity();
      }
      public int getTriggerSensitivity() {
        return result.getTriggerSensitivity();
      }
      public Builder setTriggerSensitivity(int value) {
        result.hasTriggerSensitivity = true;
        result.triggerSensitivity_ = value;
        return this;
      }
      public Builder clearTriggerSensitivity() {
        result.hasTriggerSensitivity = false;
        result.triggerSensitivity_ = 4;
        return this;
      }
    }
    
    static {
      pt.ualg.Car.Controller.CarpadControllerProtos.getDescriptor();
    }
    
    static {
      pt.ualg.Car.Controller.CarpadControllerProtos.internalForceInit();
    }
  }
  
  public static final class CarpadControllerData extends
      com.google.protobuf.GeneratedMessage {
    // Use CarpadControllerData.newBuilder() to construct.
    private CarpadControllerData() {}
    
    private static final CarpadControllerData defaultInstance = new CarpadControllerData();
    public static CarpadControllerData getDefaultInstance() {
      return defaultInstance;
    }
    
    public CarpadControllerData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pt.ualg.Car.Controller.CarpadControllerProtos.internal_static_AldricCarJavaClient_CarpadControllerData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pt.ualg.Car.Controller.CarpadControllerProtos.internal_static_AldricCarJavaClient_CarpadControllerData_fieldAccessorTable;
    }
    
    // optional .AldricCarJavaClient.KeyboardMaps keyboardMaps = 1;
    public static final int KEYBOARDMAPS_FIELD_NUMBER = 1;
    private boolean hasKeyboardMaps;
    private pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps keyboardMaps_ = pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.getDefaultInstance();
    public boolean hasKeyboardMaps() { return hasKeyboardMaps; }
    public pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps getKeyboardMaps() { return keyboardMaps_; }
    
    // optional .AldricCarJavaClient.Calibration calibration = 2;
    public static final int CALIBRATION_FIELD_NUMBER = 2;
    private boolean hasCalibration;
    private pt.ualg.Car.Controller.CarpadControllerProtos.Calibration calibration_ = pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.getDefaultInstance();
    public boolean hasCalibration() { return hasCalibration; }
    public pt.ualg.Car.Controller.CarpadControllerProtos.Calibration getCalibration() { return calibration_; }
    
    // optional string commPortName = 3;
    public static final int COMMPORTNAME_FIELD_NUMBER = 3;
    private boolean hasCommPortName;
    private java.lang.String commPortName_ = "";
    public boolean hasCommPortName() { return hasCommPortName; }
    public java.lang.String getCommPortName() { return commPortName_; }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasKeyboardMaps()) {
        output.writeMessage(1, getKeyboardMaps());
      }
      if (hasCalibration()) {
        output.writeMessage(2, getCalibration());
      }
      if (hasCommPortName()) {
        output.writeString(3, getCommPortName());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasKeyboardMaps()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getKeyboardMaps());
      }
      if (hasCalibration()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCalibration());
      }
      if (hasCommPortName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getCommPortName());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData result;
      
      // Construct using pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData();
        return builder;
      }
      
      protected pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData.getDescriptor();
      }
      
      public pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData getDefaultInstanceForType() {
        return pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData) {
          return mergeFrom((pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData other) {
        if (other == pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData.getDefaultInstance()) return this;
        if (other.hasKeyboardMaps()) {
          mergeKeyboardMaps(other.getKeyboardMaps());
        }
        if (other.hasCalibration()) {
          mergeCalibration(other.getCalibration());
        }
        if (other.hasCommPortName()) {
          setCommPortName(other.getCommPortName());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.Builder subBuilder = pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.newBuilder();
              if (hasKeyboardMaps()) {
                subBuilder.mergeFrom(getKeyboardMaps());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setKeyboardMaps(subBuilder.buildPartial());
              break;
            }
            case 18: {
              pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.Builder subBuilder = pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.newBuilder();
              if (hasCalibration()) {
                subBuilder.mergeFrom(getCalibration());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCalibration(subBuilder.buildPartial());
              break;
            }
            case 26: {
              setCommPortName(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional .AldricCarJavaClient.KeyboardMaps keyboardMaps = 1;
      public boolean hasKeyboardMaps() {
        return result.hasKeyboardMaps();
      }
      public pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps getKeyboardMaps() {
        return result.getKeyboardMaps();
      }
      public Builder setKeyboardMaps(pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasKeyboardMaps = true;
        result.keyboardMaps_ = value;
        return this;
      }
      public Builder setKeyboardMaps(pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.Builder builderForValue) {
        result.hasKeyboardMaps = true;
        result.keyboardMaps_ = builderForValue.build();
        return this;
      }
      public Builder mergeKeyboardMaps(pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps value) {
        if (result.hasKeyboardMaps() &&
            result.keyboardMaps_ != pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.getDefaultInstance()) {
          result.keyboardMaps_ =
            pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.newBuilder(result.keyboardMaps_).mergeFrom(value).buildPartial();
        } else {
          result.keyboardMaps_ = value;
        }
        result.hasKeyboardMaps = true;
        return this;
      }
      public Builder clearKeyboardMaps() {
        result.hasKeyboardMaps = false;
        result.keyboardMaps_ = pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.getDefaultInstance();
        return this;
      }
      
      // optional .AldricCarJavaClient.Calibration calibration = 2;
      public boolean hasCalibration() {
        return result.hasCalibration();
      }
      public pt.ualg.Car.Controller.CarpadControllerProtos.Calibration getCalibration() {
        return result.getCalibration();
      }
      public Builder setCalibration(pt.ualg.Car.Controller.CarpadControllerProtos.Calibration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCalibration = true;
        result.calibration_ = value;
        return this;
      }
      public Builder setCalibration(pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.Builder builderForValue) {
        result.hasCalibration = true;
        result.calibration_ = builderForValue.build();
        return this;
      }
      public Builder mergeCalibration(pt.ualg.Car.Controller.CarpadControllerProtos.Calibration value) {
        if (result.hasCalibration() &&
            result.calibration_ != pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.getDefaultInstance()) {
          result.calibration_ =
            pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.newBuilder(result.calibration_).mergeFrom(value).buildPartial();
        } else {
          result.calibration_ = value;
        }
        result.hasCalibration = true;
        return this;
      }
      public Builder clearCalibration() {
        result.hasCalibration = false;
        result.calibration_ = pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.getDefaultInstance();
        return this;
      }
      
      // optional string commPortName = 3;
      public boolean hasCommPortName() {
        return result.hasCommPortName();
      }
      public java.lang.String getCommPortName() {
        return result.getCommPortName();
      }
      public Builder setCommPortName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasCommPortName = true;
        result.commPortName_ = value;
        return this;
      }
      public Builder clearCommPortName() {
        result.hasCommPortName = false;
        result.commPortName_ = getDefaultInstance().getCommPortName();
        return this;
      }
    }
    
    static {
      pt.ualg.Car.Controller.CarpadControllerProtos.getDescriptor();
    }
    
    static {
      pt.ualg.Car.Controller.CarpadControllerProtos.internalForceInit();
    }
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_AldricCarJavaClient_KeyboardMaps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AldricCarJavaClient_KeyboardMaps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_AldricCarJavaClient_Calibration_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AldricCarJavaClient_Calibration_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_AldricCarJavaClient_CarpadControllerData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AldricCarJavaClient_CarpadControllerData_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026CarpadController.proto\022\023AldricCarJavaC" +
      "lient\"j\n\014KeyboardMaps\022\023\n\007wheelUp\030\001 \001(\005:\002" +
      "76\022\025\n\twheelDown\030\002 \001(\005:\00274\022\025\n\ttriggerUp\030\003" +
      " \001(\005:\00265\022\027\n\013triggerDown\030\004 \001(\005:\00290\"\211\001\n\013Ca" +
      "libration\022\035\n\021wheelNeutralValue\030\001 \001(\005:\00293" +
      "\022\037\n\023triggerNeutralValue\030\002 \001(\005:\00286\022\033\n\020whe" +
      "elSensitivity\030\003 \001(\005:\0013\022\035\n\022triggerSensiti" +
      "vity\030\004 \001(\005:\0014\"\234\001\n\024CarpadControllerData\0227" +
      "\n\014keyboardMaps\030\001 \001(\0132!.AldricCarJavaClie" +
      "nt.KeyboardMaps\0225\n\013calibration\030\002 \001(\0132 .A",
      "ldricCarJavaClient.Calibration\022\024\n\014commPo" +
      "rtName\030\003 \001(\tB0\n\026pt.ualg.Car.ControllerB\026" +
      "CarpadControllerProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_AldricCarJavaClient_KeyboardMaps_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_AldricCarJavaClient_KeyboardMaps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_AldricCarJavaClient_KeyboardMaps_descriptor,
              new java.lang.String[] { "WheelUp", "WheelDown", "TriggerUp", "TriggerDown", },
              pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.class,
              pt.ualg.Car.Controller.CarpadControllerProtos.KeyboardMaps.Builder.class);
          internal_static_AldricCarJavaClient_Calibration_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_AldricCarJavaClient_Calibration_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_AldricCarJavaClient_Calibration_descriptor,
              new java.lang.String[] { "WheelNeutralValue", "TriggerNeutralValue", "WheelSensitivity", "TriggerSensitivity", },
              pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.class,
              pt.ualg.Car.Controller.CarpadControllerProtos.Calibration.Builder.class);
          internal_static_AldricCarJavaClient_CarpadControllerData_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_AldricCarJavaClient_CarpadControllerData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_AldricCarJavaClient_CarpadControllerData_descriptor,
              new java.lang.String[] { "KeyboardMaps", "Calibration", "CommPortName", },
              pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData.class,
              pt.ualg.Car.Controller.CarpadControllerProtos.CarpadControllerData.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
}
